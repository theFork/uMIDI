# vim: noexpandtab tabstop=4
#
# Copyright 2012-2015 Sebastian Neuser
#
# This file is part of the uMIDI firmware.
#
# The uMIDI firmware is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The uMIDI firmware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the uMIDI firmware.  If not, see <http://www.gnu.org/licenses/>.
#

# Target file name (without extension)
TARGET = main

# Output directory.
DIR = .

# Fuse bytes
FUSE0 = 0xff
FUSE1 = 0x00
FUSE2 = 0xbf
FUSE4 = 0xfe
FUSE5 = 0xe8

# Optimization level, can be [0, 1, 2, 3, s].
# 0 = turn off optimization. s = optimize for size.
OPT = s

# Programmer configuration for avrdude
AVRDUDE_PROGRAMMER ?= atmelice_pdi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Normally you should not need to change the following settings
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #


# MCU name
MCU = atxmega128a4u

# Main CPU frequency
F_CPU = 32000000

# Dimensions for lookup tables
LOOKUP_TABLES_FILE = lib/lookup_tables.c
LOOKUP_TABLES_YRES = 10

# Compiler flags.
CFLAGS = -mmcu=$(MCU)
CFLAGS += -std=gnu99
CFLAGS += -Wall -Wstrict-prototypes
CFLAGS += -O$(OPT)
CFLAGS += -DF_CPU=$(F_CPU)UL

# Avrdude settings and variables.
AVRDUDE_FLAGS  = -c $(AVRDUDE_PROGRAMMER)
AVRDUDE_FLAGS += -p x128a4u

AVRDUDE_WRITE_FLASH = -U flash:w:$(DIR)/$(TARGET).hex
AVRDUDE_VERIFY_FLASH = -U flash:v:$(DIR)/$(TARGET).hex
AVRDUDE_READ_EEPROM = -U eeprom:r:$(DIR)/eeprom.eep:i
AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(DIR)/eeprom.eep:i
AVRDUDE_WRITE_FUSES  = -U fuse0:w:$(FUSE0):m
AVRDUDE_WRITE_FUSES += -U fuse1:w:$(FUSE1):m
AVRDUDE_WRITE_FUSES += -U fuse2:w:$(FUSE2):m
AVRDUDE_WRITE_FUSES += -U fuse4:w:$(FUSE4):m
AVRDUDE_WRITE_FUSES += -U fuse5:w:$(FUSE5):m


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Please do not edit below
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #


# Define programs and commands.
SHELL = /bin/sh
CC = avr-gcc
OBJCOPY = avr-objcopy
AVRDUDE = avrdude
REMOVE = rm -f
MKDIR = mkdir

# Define Messages
MSG_ASSEMBLING  = *** Assembling
MSG_CLEANING    = *** Cleaning project...
MSG_COMPILING   = *** Compiling
MSG_DOWNLOADING = *** Backing up EEPROM...
MSG_EEPROM      = *** Writing EEPROM...
MSG_FLASH       = *** Creating hex load file
MSG_FUSE        = *** Setting fuse bits...
MSG_GENERATING  = *** Generating source files...
MSG_LINKING     = *** Linking
MSG_PROGRAMING  = *** Programing MC...

# Determine the list of C source files
SRC  = $(LOOKUP_TABLES_FILE)
SRC += $(filter-out $(LOOKUP_TABLES_FILE) $(wildcard lib/usb*.c) lib/serial_communication.c,$(wildcard lib/*.c)) $(wildcard *.c)

# Default target.
help:
	@echo "#------------------------------------------------------------------------------#"
	@echo "Hello and welcome to haggl's awesome universal AVR Makefile! ;-)"
	@echo
	@echo "These are the available targets:"
	@echo "    make all      :  clean, compile and install"
	@echo "    make allinc   :  backup, clean, compile, install and eep"
	@echo "    make asm      :  compile the software and create .asm-files"
	@echo "    make backup   :  read data from eeprom"
	@echo "    make compile  :  compile the software and create .hex-file"
	@echo "    make clean    :  clean up built project files"
	@echo "    make eep      :  write data to eeprom"
	@echo "    make fuse     :  write fuse bits"
	@echo "    make help     :  display this message"
	@echo "    make install  :  load the hex file to the device, using avrdude"
	@echo
	@echo "You may want to adjust some variables in the Makefile header..."
	@echo "AND:"
	@echo "Be careful with fuse bits!"
	@echo "#------------------------------------------------------------------------------#"


# Internal rule:
# Generate lookup tables file.
$(LOOKUP_TABLES_FILE):
	$(info )
	$(info $(MSG_GENERATING))
	../../toolchain/compute_lookup_tables.pl -y $(LOOKUP_TABLES_YRES) $(LOOKUP_TABLES_FILE)

# Internal rule:
# Compile object files from C source files.
$(DIR)/%.o: %.c
	$(info )
	$(info $(MSG_COMPILING) $<)
	$(CC) -c $(CFLAGS) $< -o $@

# Internal rule:
# Link ELF output file from object files.
OBJ = $(addprefix $(DIR)/,$(patsubst %.c,%.o,$(SRC)))
%.elf: $(OBJ)
	$(info )
	$(info $(MSG_LINKING) $@)
	$(CC) $(CFLAGS) $(OBJ) -o $(DIR)/$@

# Internal rule:
# Create final output file (.hex) from ELF.
%.hex: %.elf
	$(info )
	$(info $(MSG_FLASH) $@)
	$(OBJCOPY) -O ihex -R .eeprom $(DIR)/$< $(DIR)/$@

# Internal rule:
# Create assembler files from C source files.
%.s: %.c
	$(info )
	$(info $(MSG_ASSEMBLING) $<)
	$(CC) -S $(CFLAGS) $< -o $(DIR)/$@

# Target:
# Compile project and generate hex load file
compile: $(TARGET).hex

# Target:
# Generate main target assembly.
ASM = $(addprefix $(DIR)/,$(patsubst %.c,%.s,$(SRC)))
asm: $(ASM)

# Target:
# Clean project.
clean:
	$(info )
	$(info $(MSG_CLEANING))
	$(REMOVE) $(LOOKUP_TABLES_FILE)
	$(REMOVE) $(DIR)/$(TARGET).elf
	$(REMOVE) $(DIR)/$(TARGET).hex
	$(REMOVE) $(OBJ)
	$(REMOVE) $(ASM)

# Target:
# Program the device.
install: compile
	$(info )
	$(info $(MSG_PROGRAMING))
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH) $(AVRDUDE_VERIFY_FLASH)

# Target:
# Set fuse bits.
fuse:
	$(info )
	$(info $(MSG_FUSE))
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FUSES)

# Target:
# Backup EEPROM data
backup:
	$(info )
	$(info $(MSG_DOWNLOADING))
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_READ_EEPROM)

# Target:
# EEPROM write
eep:
	$(info )
	$(info $(MSG_EEPROM))
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_EEPROM)

# Target:
# Clean, compile and install.
all: clean install

# Target:
# Clean, backup EEPROM, compile, install and write EEPROM.
allinc: clean backup install eep

# Phony targets.
.PHONY: all allinc asm backup compile clean eep fuse install


.SECONDARY: $(OBJ)
.NOTPARALLEL:
